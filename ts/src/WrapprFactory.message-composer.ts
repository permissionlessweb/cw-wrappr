/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { ExecuteMsg, Timestamp, Uint64, Uint128, CreateMinterMsgForWrapprMinterInitMsgExtension, CollectionParams, CollectionInfo, WrapprMinterInitMsgExtension, Coin, InstantiateMsg, MinterParamsForNullable_Empty, Empty } from "./WrapprFactory.types";
export interface WrapprFactoryMessage {
  contractAddress: string;
  sender: string;
  createMinter: ({
    collectionParams,
    initMsg
  }: {
    collectionParams: CollectionParams;
    initMsg: WrapprMinterInitMsgExtension;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class WrapprFactoryMessageComposer implements WrapprFactoryMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createMinter = this.createMinter.bind(this);
  }

  createMinter = ({
    collectionParams,
    initMsg
  }: {
    collectionParams: CollectionParams;
    initMsg: WrapprMinterInitMsgExtension;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_minter: {
            collection_params: collectionParams,
            init_msg: initMsg
          }
        })),
        funds
      })
    };
  };
}